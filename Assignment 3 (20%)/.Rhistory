predictions <- predict(knn_model)
# Step 1: Calculate residuals
residuals <- ms.measured$intensity - predictions
# Step 2: Compute the standard deviation of the residuals
estimated_noise_sd <- sd(residuals)
estimated_noise_sd
#Q3.6
ytest.hat = fitted(kknn(intensity ~ .,ms.measured, ms.truth, kernel = "optimal", k = 6))
sd(ms.measured$intensity - ytest.hat)
#Q3.6
ms.truth$MZ[which.max(ytest.hat)]
ms.train$MZ[which.max(ytest.hat)]
ms.measured$MZ[which.max(ytest.hat)]
ms.truth$MZ[which.max(ytest.hat)]
ms.measured$MZ[which.max(ytest.hat)]
#Q3.8
knn_estimate <- function(data, indices, MZ_value, k) {
# Subset the data using bootstrapped indices
bootstrap_data <- data[indices, ]
# Fit k-NN model
knn_model <- kknn(intensity ~ MZ, train = bootstrap_data, test = NULL, k = k, kernel = "optimal")
# Predict intensity for the specific MZ value
prediction <- as.numeric(predict(knn_model, newdata = data.frame(MZ = MZ_value)))
return(prediction)
}
# Define the MZ value of interest (use the value from Question 3.7)
MZ_of_interest <- 7963.3
# Set the number of bootstrap replications
n_bootstrap_replications <- 5000
# Define k values (k determined in Question 3.5, k = 3, and k = 20)
k_values <- c(6, 3, 20)
# Initialize an empty list to store confidence intervals
confidence_intervals <- list()
# Loop through different k values
for (k in k_values) {
# Bootstrap resampling
boot_results <- boot(data = ms.measured, statistic = knn_estimate, R = n_bootstrap_replications,
MZ_value = MZ_of_interest, k = k)
# Calculate 95% confidence interval
ci <- boot.ci(boot_results, type = "basic")$basic
# Store the confidence interval
confidence_intervals[[as.character(k)]] <- ci
}
# Loop through different k values
for (k in k_values) {
# Bootstrap resampling
boot_results <- boot(data = ms.measured, statistic = knn_estimate, R = n_bootstrap_replications,
MZ_value = MZ_of_interest, k = k)
# Calculate 95% confidence interval
ci <- boot.ci(boot_results, type = "basic")$basic
# Store the confidence interval
confidence_intervals[[as.character(k)]] <- ci
}
# Loop through different k values
for (k in k_values) {
# Bootstrap resampling
boot_results <- boot(data = ms.measured, statistic = knn_estimate, R = n_bootstrap_replications, MZ_value = MZ_of_interest, k = k)
# Calculate 95% confidence interval
ci <- boot.ci(boot_results, type = "basic")$basic
# Store the confidence interval
confidence_intervals[[as.character(k)]] <- ci
}
# Print the confidence intervals
for (k in k_values) {
cat("95% CI for k =", k, ": [", confidence_intervals[[as.character(k)]][1], ", ", confidence_intervals[[as.character(k)]][2], "]\n")
}
#Q3.8
mztest.k3.hat = fitted(kknn(intensity~., ms.measured, ms.truth, kernel='optimal', k=3))
boot.max = function(formula, data, indices){
d = data[indices,]
target = ms.test[which.max(mztest.k3.hat),]
mz = fitted(kknn(formula, d, target, kernel='optimal', k=3))
return(mz)
}
bs = boot(data=ms.train, statistic=boot.max, R=5000, formula=intensity~.)
bs = boot(data=ms.measured, statistic=boot.max, R=5000, formula=intensity~.)
bs = boot(data=ms.measured, statistic=boot.max, R=5000, formula=intensity~.)
target = ms.test[which.max(mztest.k3.hat),]
target = ms.truth[which.max(mztest.k3.hat),]
mz = fitted(kknn(formula, d, target, kernel='optimal', k=3))
#Q3.8
mztest.k3.hat = fitted(kknn(intensity~., ms.measured, ms.truth, kernel='optimal', k=3))
boot.max = function(formula, data, indices){
d = data[indices,]
target = ms.truth[which.max(mztest.k3.hat),]
mz = fitted(kknn(formula, d, target, kernel='optimal', k=3))
return(mz)
}
bs = boot(data=ms.measured, statistic=boot.max, R=5000, formula=intensity~.)
boot.ci(bs,conf=0.95,type="basic")
# Create a bootstrapped version of our data
d = data[indices,]
#Q3.8
boot.intensity = function(data, indices, k_value)
{
# Create a bootstrapped version of our data
d = data[indices,]
# Use k-NN to estimate the values of spectrum associated with the MZ values in ms.truth.2022.csv$MZ
ytest.hat = fitted(kknn(intensity ~ ., d, ms.test, kernel = "optimal", k = k_value) )
return(ytest.hat[160])
}
get_boot_ci = function(k_value) {
bs_intensity = boot(data=ms.train, statistic=boot.intensity, R=5000, k_value=k_value)
return(boot.ci(bs_intensity, conf=0.95, type="bca"))
}
# Usage
ci_k3 <- get_boot_ci(3)
#Q3.8
boot.intensity = function(data, indices, k_value)
{
# Create a bootstrapped version of our data
d = data[indices,]
# Use k-NN to estimate the values of spectrum associated with the MZ values in ms.truth.2022.csv$MZ
ytest.hat = fitted(kknn(intensity ~ ., d, ms.truth, kernel = "optimal", k = k_value) )
return(ytest.hat[160])
}
get_boot_ci = function(k_value) {
bs_intensity = boot(data=ms.measured, statistic=boot.intensity, R=5000, k_value=k_value)
return(boot.ci(bs_intensity, conf=0.95, type="bca"))
}
# Usage
ci_k3 <- get_boot_ci(3)
# Usage
get_boot_ci(3)
calculate_boot_ci = function(k_value) {
bs_intensity = boot(data=ms.measured, statistic=boot.intensity, R=5000, k_value=k_value)
return(boot.ci(bs_intensity, conf=0.95, type="bca"))
}
library(kknn)
library(ggplot2)
ms.truth <- read.csv("ms.truth.2023.csv")
ms.measured <- read.csv("ms.measured.2023.csv")
mse_values <- numeric(25)
for (k in 1:25) {
knn_model <- kknn(intensity ~ MZ, train = ms.measured, test = ms.truth, k = k, kernel = "optimal")
predictions <- predict(knn_model)
mse <- mean((predictions - ms.truth$intensity)^2)
mse_values[k] <- mse
}
mse_values
plot(1:25, mse_values, type = "b", xlab = "k", ylab = "Mean Squared Error", main = "Plot of Mean Squared Error vs. k")
#Q3.2
spectra_plot <- function(k) {
knn_model <- kknn(intensity ~ MZ, train = ms.measured, test = ms.truth, k = k, kernel = "optimal")
predictions <- predict(knn_model)
plot_data <- data.frame(MZ = ms.truth$MZ, True_Intensity = ms.truth$intensity, Predicted_Intensity = predictions, Measured_Intensity = ms.measured$intensity)
ggplot(plot_data, aes(x = MZ)) +
geom_line(aes(y = True_Intensity, color = "True Spectrum"), size = 1) +
geom_point(aes(y = True_Intensity, color = "True Spectrum"), size = 1, alpha = 0.5, shape = 16) +
geom_line(aes(y = Predicted_Intensity, color = "Estimated Spectrum"), size = 1) +
geom_point(aes(y = Predicted_Intensity, color = "Estimated Spectrum"), size = 1, shape = 17) +
geom_point(aes(y = Measured_Intensity, color = "Training Data"), size = 1, alpha = 0.5, shape = 16) +
labs(title = paste("k =", k), x = "MZ", y = "Intensity", color = "Legend") +
scale_color_manual(values = c("True Spectrum" = "blue", "Estimated Spectrum" = "red", "Training Data" = "black"))
}
spectra_plot(2)
spectra_plot(5)
spectra_plot(10)
spectra_plot(25)
#Q3.3
spectra_plot(6)
spectra_plot(7)
#Q3.5
# Cross validation for k
cv_results <- train.kknn(intensity ~ MZ, data = ms.measured, kmax=25, kernel = "optimal")
best_k <- cv_results$best.parameters$k
best_k
# Find smallest mean-squared error for k
mse_values <- numeric(25)
for (k in 1:25) {
knn_model <- kknn(intensity ~ MZ, train = ms.measured, test = ms.truth, k = k, kernel = "optimal")
predictions <- predict(knn_model)
mse <- mean((predictions - ms.truth$intensity)^2)
mse_values[k] <- mse
}
mse_values
min_mse_k <- which.min(mse_values)
min_mse_k
#Q3.6
ytest.hat = fitted(kknn(intensity ~ .,ms.measured, ms.truth, kernel = "optimal", k = 6))
sd(ms.measured$intensity - ytest.hat)
#Q3.7
ms.truth$MZ[which.max(ytest.hat)]
ms.measured$MZ[which.max(ytest.hat)]
#Q3.8
boot.intensity = function(data, indices, k_value)
{
# Create a bootstrapped version of our data
d = data[indices,]
# Use k-NN to estimate the values of spectrum associated with the MZ values in ms.truth.2022.csv$MZ
ytest.hat = fitted(kknn(intensity ~ ., d, ms.truth, kernel = "optimal", k = k_value) )
return(ytest.hat[160])
}
calculate_boot_ci = function(k_value) {
bs_intensity = boot(data=ms.measured, statistic=boot.intensity, R=5000, k_value=k_value)
return(boot.ci(bs_intensity, conf=0.95, type="bca"))
}
calculate_boot_ci(3)
#Q3.7
ms.truth$MZ[which.max(ytest.hat)]
#Q3.8
boot.intensity = function(data, indices, k_value)
{
d = data[indices,]
target = ms.truth$MZ[which.max(ytest.hat)]
ytest.hat = fitted(kknn(intensity ~ ., d, ms.truth, kernel = "optimal", k = k_value) )
return(ytest.hat[160])
}
calculate_boot_ci = function(k_value) {
bs_intensity = boot(data=ms.measured, statistic=boot.intensity, R=5000, k_value=k_value)
return(boot.ci(bs_intensity, conf=0.95, type="bca"))
}
calculate_boot_ci(3)
mztest.k3.hat = fitted(kknn(intensity~., ms.measured, ms.truth, kernel='optimal', k=3))
boot.max = function(formula, data, indices){
d = data[indices,]
target = ms.truth[which.max(mztest.k3.hat),]
mz = fitted(kknn(formula, d, target, kernel='optimal', k=3))
return(mz)
}
bs = boot(data=ms.measured, statistic=boot.max, R=5000, formula=intensity~.)
boot.ci(bs,conf=0.95,type="basic")
calculate_boot_ci(3)
boot.ci(bs,conf=0.95,type="bca")
#Q3.7
ms.truth$MZ[which.max(ytest.hat)]
target = 7963.3
#Q3.8
boot.intensity <- function(data, indices, k)
{
d = data[indices,]
target = 7963.3
ytest.hat = fitted(kknn(intensity ~ ., d, ms.truth, kernel = "optimal", k = k) )
return(ytest.hat[160])
}
calculate_boot_ci = function(k_value) {
bs_intensity = boot(data=ms.measured, statistic=boot.intensity, R=5000, k_value =k)
return(boot.ci(bs_intensity, conf=0.95, type="bca"))
}
calculate_boot_ci(3)
#Q3.8
boot.intensity <- function(data, indices, k)
{
d = data[indices,]
target = 7963.3
ytest.hat = fitted(kknn(intensity ~ ., d, ms.truth, kernel = "optimal", k = k) )
return(ytest.hat[160])
}
calculate_boot_ci = function(k_value) {
bs_intensity = boot(data=ms.measured, statistic=boot.intensity, R=5000, k)
return(boot.ci(bs_intensity, conf=0.95, type="bca"))
}
calculate_boot_ci(3)
#Q3.8
boot.intensity <- function(data, indices, k)
{
d = data[indices,]
target = 7963.3
ytest.hat = fitted(kknn(intensity ~ ., d, ms.truth, kernel = "optimal", k = k) )
return(ytest.hat[160])
}
calculate_boot_ci = function(k_value) {
bs_intensity = boot(data=ms.measured, statistic=boot.intensity, R=5000, k_value = k)
return(boot.ci(bs_intensity, conf=0.95, type="bca"))
}
calculate_boot_ci(3)
calculate_boot_ci = function(k_value) {
bs_intensity = boot(data=ms.measured, statistic=boot.intensity, R=5000, k_value = k_value)
return(boot.ci(bs_intensity, conf=0.95, type="bca"))
}
calculate_boot_ci(3)
ytest.hat = fitted(kknn(intensity ~ ., d, ms.truth, kernel = "optimal", k_value = k) )
#Q3.8
boot.intensity <- function(data, indices, k)
{
d = data[indices,]
target = 7963.3
ytest.hat = fitted(kknn(intensity ~ ., d, ms.truth, kernel = "optimal", k_value = k) )
return(ytest.hat[160])
}
calculate_boot_ci = function(k_value) {
bs_intensity = boot(data=ms.measured, statistic=boot.intensity, R=5000, k_value = k_value)
return(boot.ci(bs_intensity, conf=0.95, type="bca"))
}
calculate_boot_ci(3)
max_abundance_mz <- 7963.3  # Value from previous analysis
# Define the k values
k_values <- c(6, 3, 20)  # Values from the question
# Function to calculate the k-NN estimate at the specific MZ value
knn_estimate <- function(data, indices, mz_value, k) {
d <- data[indices,]
knn_model <- kknn(intensity ~ MZ, train = d, test = data.frame(MZ = mz_value), k = k, kernel = "optimal")
return(predict(knn_model))
}
# Bootstrap procedure for each value of k
bootstrap_ci <- function(k) {
set.seed(123)  # Set seed for reproducibility
boot_results <- boot(ms.measured, knn_estimate, R = 5000, mz_value = max_abundance_mz, k = k)
ci <- boot.ci(boot_results, type = "basic", conf = 0.95)$basic
return(ci)
}
# Calculate confidence intervals for each value of k
conf_intervals <- sapply(k_values, bootstrap_ci)
# Print the confidence intervals
conf_intervals
# Print the confidence intervals
conf_intervals
bootstrap_ci(3)
return(ci)
# Bootstrap procedure for each value of k
bootstrap_ci <- function(k) {
set.seed(123)  # Set seed for reproducibility
boot_results <- boot(ms.measured, knn_estimate, R = 5000, mz_value = max_abundance_mz, k = k)
ci <- boot.ci(boot_results, type = "basic", conf = 0.95)
return(ci)
}
bootstrap_ci(3)
mztest.k3.hat = fitted(kknn(intensity~., ms.measured, ms.truth, kernel='optimal', k=3))
boot.max = function(formula, data, indices){
d = data[indices,]
target = 7963.3
mz = fitted(kknn(formula, d, target, kernel='optimal', k=3))
return(mz)
}
bs = boot(data=ms.measured, statistic=boot.max, R=5000, formula=intensity~.)
boot.ci(bs,conf=0.95,type="basic")
boot.ci(bs,conf=0.95,type="basic")
bootstrap_ci(3)
mztest.k3.hat = fitted(kknn(intensity~., ms.measured, ms.truth, kernel='optimal', k=3))
boot.max = function(formula, data, indices){
d = data[indices,]
target = 7963.3
mz = fitted(kknn(formula, d, target, kernel='optimal', k=3))
return(mz)
}
bs = boot(data=ms.measured, statistic=boot.max, R=5000, formula=intensity~.)
boot.ci(bs,conf=0.95,type="basic")
bs = boot(ms.measured, knn_estimate, R = 5000, mz_value = 7963.3, k = k)
boot.ci(bs,conf=0.95,type="basic")
bs = boot(ms.measured, boot.max, R = 5000, mz_value = 7963.3, k = k)
#Q3.8
knn_estimate <- function(data, indices, mz_value, k) {
d <- data[indices,]
knn_model <- kknn(intensity ~ MZ, train = d, test = data.frame(MZ = mz_value), k = k, kernel = "optimal")
return(predict(knn_model))
}
# Bootstrap procedure for each value of k
bootstrap_ci <- function(k) {
set.seed(123)  # Set seed for reproducibility
boot_results <- boot(ms.measured, knn_estimate, R = 5000, mz_value = 7963.3, k = k)
ci <- boot.ci(boot_results, type = "basic", conf = 0.95)
return(ci)
}
bootstrap_ci(3)
bootstrap_ci(6)
bootstrap_ci(20)
#Q3.8
knn_estimate <- function(data, indices, mz_value, k) {
d <- data[indices,]
knn_model <- kknn(intensity ~ MZ, train = d, test = data.frame(MZ = mz_value), k = k, kernel = "optimal")
return(predict(knn_model))
}
# Bootstrap procedure for each value of k
bootstrap_ci <- function(k) {
boot_results <- boot(ms.measured, knn_estimate, R = 5000, mz_value = 7963.3, k = k)
ci <- boot.ci(boot_results, type = "basic", conf = 0.95)
return(ci)
}
bootstrap_ci(3)
setwd("~/My Drive/Collection/3-SEM_2/FIT2086/Assignment 3 (20%)")
housing <- read.csv("housing.2023.csv")
View(housing)
model <- lm(medv ~ crim + zn + indus + chas + nox + rm + age + dis + rad + tax + ptratio + lstat, data = housing)
summary(model)
final_model <- step(model, direction = "both", k = log(nrow(housing)))
summary(final_model)
library(kknn)
library(ggplot2)
ms.truth <- read.csv("ms.truth.2023.csv")
ms.measured <- read.csv("ms.measured.2023.csv")
mse_values <- numeric(25)
for (k in 1:25) {
knn_model <- kknn(intensity ~ MZ, train = ms.measured, test = ms.truth, k = k, kernel = "optimal")
predictions <- predict(knn_model)
mse <- mean((predictions - ms.truth$intensity)^2)
mse_values[k] <- mse
}
mse_values
plot(1:25, mse_values, type = "b", xlab = "k", ylab = "Mean Squared Error", main = "Plot of Mean Squared Error vs. k")
for (k in 1:25) {
knn_model <- kknn(intensity ~ MZ, train = ms.measured, test = ms.truth, k = k, kernel = "optimal")
predictions <- predict(knn_model)
mse <- mean((predictions - ms.truth$intensity)^2)
mse_values[k] <- mse
}
mse_values
plot(1:25, mse_values, type = "b", xlab = "k", ylab = "Mean Squared Error", main = "Plot of Mean Squared Error vs. k")
#Q3.2
spectra_plot <- function(k) {
knn_model <- kknn(intensity ~ MZ, train = ms.measured, test = ms.truth, k = k, kernel = "optimal")
predictions <- predict(knn_model)
plot_data <- data.frame(MZ = ms.truth$MZ, True_Intensity = ms.truth$intensity, Predicted_Intensity = predictions, Measured_Intensity = ms.measured$intensity)
ggplot(plot_data, aes(x = MZ)) +
geom_line(aes(y = True_Intensity, color = "True Spectrum"), size = 1) +
geom_point(aes(y = True_Intensity, color = "True Spectrum"), size = 1, alpha = 0.5, shape = 16) +
geom_line(aes(y = Predicted_Intensity, color = "Estimated Spectrum"), size = 1) +
geom_point(aes(y = Predicted_Intensity, color = "Estimated Spectrum"), size = 1, shape = 17) +
geom_point(aes(y = Measured_Intensity, color = "Training Data"), size = 1, alpha = 0.5, shape = 16) +
labs(title = paste("k =", k), x = "MZ", y = "Intensity", color = "Legend") +
scale_color_manual(values = c("True Spectrum" = "blue", "Estimated Spectrum" = "red", "Training Data" = "black"))
}
spectra_plot(2)
spectra_plot(5)
spectra_plot(10)
spectra_plot(25)
#Q3.3
spectra_plot(6)
spectra_plot(7)
#Q3.5
cv_results <- train.kknn(intensity ~ MZ, data = ms.measured, kmax=25, kernel = "optimal")
best_k <- cv_results$best.parameters$k
best_k
mse_values <- numeric(25)
bootstrap_ci <- function(k) {
boot_results <- boot(ms.measured, knn_estimate, R = 5000, mz_value = 7963.3, k = k)
ci <- boot.ci(boot_results, type = "basic", conf = 0.95)
return(ci)
}
bootstrap_ci(3)
#Q2.9
library(boot)
boot.auc <- function(formula, data, indices)
{
# Create a bootstrapped version of our data
d = data[indices,]
# Fit a logistic regression to the bootstrapped data
fit = glm(formula, d, family=binomial)
# Compute the AUC and return it
target = patient_69
rv = predict(fit, target, type="response")
return(rv)
}
bs_logic <- boot(data=heart.train, statistic=boot.auc, R=5000, formula=as.factor(HD) ~ CP + THALACH + OLDPEAK +
CA + THAL)
boot.ci(bs_logic, conf=0.95, type="bca")
library(kknn)
library(ggplot2)
ms.truth <- read.csv("ms.truth.2023.csv")
ms.measured <- read.csv("ms.measured.2023.csv")
mse_values <- numeric(25)
for (k in 1:25) {
knn_model <- kknn(intensity ~ MZ, train = ms.measured, test = ms.truth, k = k, kernel = "optimal")
predictions <- predict(knn_model)
mse <- mean((predictions - ms.truth$intensity)^2)
mse_values[k] <- mse
}
mse_values
plot(1:25, mse_values, type = "b", xlab = "k", ylab = "Mean Squared Error", main = "Plot of Mean Squared Error vs. k")
#Q3.2
spectra_plot <- function(k) {
knn_model <- kknn(intensity ~ MZ, train = ms.measured, test = ms.truth, k = k, kernel = "optimal")
predictions <- predict(knn_model)
plot_data <- data.frame(MZ = ms.truth$MZ, True_Intensity = ms.truth$intensity, Predicted_Intensity = predictions, Measured_Intensity = ms.measured$intensity)
ggplot(plot_data, aes(x = MZ)) +
geom_line(aes(y = True_Intensity, color = "True Spectrum"), size = 1) +
geom_point(aes(y = True_Intensity, color = "True Spectrum"), size = 1, alpha = 0.5, shape = 16) +
geom_line(aes(y = Predicted_Intensity, color = "Estimated Spectrum"), size = 1) +
geom_point(aes(y = Predicted_Intensity, color = "Estimated Spectrum"), size = 1, shape = 17) +
geom_point(aes(y = Measured_Intensity, color = "Training Data"), size = 1, alpha = 0.5, shape = 16) +
labs(title = paste("k =", k), x = "MZ", y = "Intensity", color = "Legend") +
scale_color_manual(values = c("True Spectrum" = "blue", "Estimated Spectrum" = "red", "Training Data" = "black"))
}
spectra_plot(2)
spectra_plot(5)
spectra_plot(10)
spectra_plot(25)
#Q3.3
spectra_plot(6)
spectra_plot(7)
#Q3.5
cv_results <- train.kknn(intensity ~ MZ, data = ms.measured, kmax=25, kernel = "optimal")
best_k <- cv_results$best.parameters$k
best_k
mse_values <- numeric(25)
for (k in 1:25) {
knn_model <- kknn(intensity ~ MZ, train = ms.measured, test = ms.truth, k = k, kernel = "optimal")
predictions <- predict(knn_model)
mse <- mean((predictions - ms.truth$intensity)^2)
mse_values[k] <- mse
}
mse_values
min_mse_k <- which.min(mse_values)
min_mse_k
#Q3.6
ytest.hat <- fitted(kknn(intensity ~ .,ms.measured, ms.truth, kernel = "optimal", k = 6))
sd(ms.measured$intensity - ytest.hat)
#Q3.7
ms.truth$MZ[which.max(ytest.hat)]
#Q3.8
knn_estimate <- function(data, indices, mz_value, k) {
d <- data[indices,]
knn_model <- kknn(intensity ~ MZ, train = d, test = data.frame(MZ = mz_value), k = k, kernel = "optimal")
return(predict(knn_model))
}
bootstrap_ci <- function(k) {
boot_results <- boot(ms.measured, knn_estimate, R = 5000, mz_value = 7963.3, k = k)
ci <- boot.ci(boot_results, type = "basic", conf = 0.95)
return(ci)
}
bootstrap_ci(3)
bootstrap_ci(6)
bootstrap_ci(20)

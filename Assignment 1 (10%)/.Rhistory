geom_bar(stat = "count", fill = "lightblue") +
geom_bar(data = subset(df, Days %in% top_values),
aes(x = factor(Days)),
stat = "count", fill = "red") +
scale_x_discrete(labels = function(x) ifelse(x %in% top_values, paste(x, "\n(Top)", sep = ""), as.character(x))) +
labs(x = "Days", y = "Frequency")
#Question 2B
ggplot(df, aes(x = Days)) +
geom_bar(stat = "count", bins = 10) +
scale_x_continuous(breaks = seq(min(df$Days), max(df$Days), by = 1))
freq_df <- data.frame(table(df$Days))
top_values <- head(freq_df[order(-freq_df$Freq), ], 3)$Var1
ggplot(df, aes(x = factor(Days))) +
geom_bar(stat = "count", fill = "lightblue") +
geom_bar(data = subset(df, Days %in% top_values),
aes(x = factor(Days)),
stat = "count", fill = "red") +
scale_x_discrete(labels = function(x) ifelse(x %in% top_values, paste(x, "\n(Top)", sep = ""), as.character(x))) +
labs(x = "Days", y = "Frequency")
ggplot(df, aes(x = factor(Days))) +
geom_bar(stat = "count", fill = "lightblue") +
geom_bar(data = subset(df, Days %in% top_values),
aes(x = factor(Days)),
stat = "count", fill = "red") +
scale_x_discrete(labels = function(x) ifelse(x %in% top_values, paste(x, "\n(Top)", sep = ""), as.character(x)))
#Question 2B
freq_df <- data.frame(table(df$Days))
top_values <- head(freq_df[order(-freq_df$Freq), ], 3)$Var1
ggplot(df, aes(x = factor(Days))) +
geom_bar(stat = "count") +
geom_bar(data = subset(df, Days %in% top_values),
aes(x = factor(Days)),
stat = "count", fill = "red") +
scale_x_discrete(labels = function(x)
ifelse(x %in% top_values, paste(x, "\n(Top)", sep = ""), as.character(x))) +
labs(x = "Days", y = "Frequency")
# Question 1
library(MASS)
fit <- fitdistr(df$Days, "Poisson")
estimated_lambda <- fit$estimate["lambda"]
print(estimated_lambda)
# Question 2A
lambda <- 15.556
probability_10_or_less <- ppois(10, lambda)
cat("The probability of a patient recovering in 10 or less days:"
, probability_10_or_less)
# Question 2A
lambda <- 15.556
probability_10_or_less <- ppois(10, lambda)
print(probability_10_or_less)
# Question 2C
# Function to calculate Poisson probability base on PMF
poisson_prob_range <- function(lambda_f, k_min, k_max) {
probabilities <- numeric(k_max - k_min + 1)
for (k in k_min:k_max) {
probabilities[k - k_min + 1] <- (lambda_f^k * exp(-lambda_f)) / factorial(k)
}
return(sum(probabilities))
}
# Total rate parameter for five individuals, Range is 60 to 80 days
probability <- poisson_prob_range(5 * lambda, 60, 80)
print(probability)
# Question 2D
# Calculate the cumulative distribution function (CDF) up to day_of_interest - 1
prob_all_recover_before_14 <- 0
for (k in 0:13) {
probability <- (exp(-lambda) * lambda^k) / factorial(k)
prob_all_recover_before_14 <- prob_all_recover_before_14 + probability^5
}
# Probability that at least three patients recover on or after day 14
prob_at_least_three_recover_on_or_after_14 <- 1 - prob_all_recover_before_14
# Print the probability
print(prob_at_least_three_recover_on_or_after_14)
# Question 3A
plot(df$Days, dpois(df$Days, lambda),
type='h',
main='Poisson Distribution Of Days',
ylab='Probability',
xlab ='Days',
lwd=3)
# Changing axis labels
x_labels <- seq(min(df$Days), max(df$Days), by = 1)
axis(side = 1, at = x_labels, labels = x_labels)
# Question 3A
ggplot() +
geom_line(aes(x = df$Days, y = dpois(df$Days, lambda)), color = "blue", size = 3) +
labs(title = "Poisson Distribution Of Days",
x = "Days",
y = "Probability") +
scale_x_continuous(breaks = seq(min(df$Days), max(df$Days), by = 1)) +
theme_minimal()
poisson_plot
poisson_plot <-ggplot() +
geom_line(aes(x = df$Days, y = dpois(df$Days, lambda)), color = "blue", size = 3) +
labs(title = "Poisson Distribution Of Days",
x = "Days",
y = "Probability") +
scale_x_continuous(breaks = seq(min(df$Days), max(df$Days), by = 1)) +
theme_minimal()
poisson_plot
days_plot
days_plot <- ggplot(df, aes(x = factor(Days))) +
geom_bar(stat = "count") +
geom_bar(data = subset(df, Days %in% top_values),
aes(x = factor(Days)),
stat = "count", fill = "red") +
scale_x_discrete(labels = function(x)
ifelse(x %in% top_values, paste(x, "\n(Top)", sep = ""), as.character(x))) +
labs(x = "Days", y = "Frequency")
days_plot
plot_grid(poisson_plot, days_plot, labels = "AUTO", nrow = 1)
combined_plot <- plot_grid(poisson_plot, days_plot, labels = "AUTO", nrow = 1)
geom_bar(stat = "count") +
geom_bar(data = subset(df, Days %in% top_values),
aes(x = factor(Days)),
stat = "count", fill = "red") +
scale_x_discrete(labels = function(x)
ifelse(x %in% top_values, paste(x, "\n(Top)", sep = ""), as.character(x))) +
labs(x = "Days", y = "Frequency")
ggplot(df, aes(x = factor(Days))) +
geom_bar(stat = "count") +
geom_bar(data = subset(df, Days %in% top_values),
aes(x = factor(Days)),
stat = "count", fill = "red") +
scale_x_discrete(labels = function(x)
ifelse(x %in% top_values, paste(x, "\n(Top)", sep = ""), as.character(x))) +
labs(x = "Days", y = "Frequency")
ggplot(df, aes(x = factor(Days))) +geom_line(aes(x = df$Days, y = dpois(df$Days, lambda)), color = "blue", size = 3)+
geom_bar(stat = "count") +
geom_bar(data = subset(df, Days %in% top_values),
aes(x = factor(Days)),
stat = "count", fill = "red") +
scale_x_discrete(labels = function(x)
ifelse(x %in% top_values, paste(x, "\n(Top)", sep = ""), as.character(x))) +
labs(x = "Days", y = "Frequency")
ggplot(df, aes(x = factor(Days))) +
geom_line(aes(x = df$Days, y = dpois(df$Days, lambda)), color = "blue", size = 3)+
geom_bar(stat = "count") +
geom_bar(data = subset(df, Days %in% top_values),
aes(x = factor(Days)),
stat = "count", fill = "red") +
scale_x_discrete(labels = function(x)
ifelse(x %in% top_values, paste(x, "\n(Top)", sep = ""), as.character(x))) +
labs(x = "Days", y = "Frequency")
ggplot(df, aes(x = factor(Days))) +
geom_bar(stat = "count") +
geom_bar(data = subset(df, Days %in% top_values),
aes(x = factor(Days)),
stat = "count", fill = "red") +
scale_x_discrete(labels = function(x)
ifelse(x %in% top_values, paste(x, "\n(Top)", sep = ""), as.character(x))) +
labs(x = "Days", y = "Frequency")
# Question 3A
ggplot() +
geom_line(aes(x = df$Days, y = dpois(df$Days, lambda)), color = "blue", size = 3) +
labs(title = "Poisson Distribution Of Days",
x = "Days",
y = "Probability") +
scale_x_continuous(breaks = seq(min(df$Days), max(df$Days), by = 1)) +
theme_minimal()
ggplot(df, aes(x = factor(Days))) +
geom_bar(stat = "count") +
geom_bar(data = subset(df, Days %in% top_values),
aes(x = factor(Days)),
stat = "count", fill = "red") +
scale_x_discrete(labels = function(x)
ifelse(x %in% top_values, paste(x, "\n(Top)", sep = ""), as.character(x))) +
labs(x = "Days", y = "Frequency")
# Question 3A
ggplot(df, aes(x = Days)) +
geom_bar(stat = "count", bins = 10) +
scale_x_continuous(breaks = seq(min(df$Days), max(df$Days), by = 1))
geom_line(aes(x = df$Days, y = dpois(df$Days, lambda)), color = "blue", size = 3)+
# Question 3A
ggplot(df, aes(x = Days)) +
geom_bar(stat = "count", bins = 10) +
scale_x_continuous(breaks = seq(min(df$Days), max(df$Days), by = 1))
# Poisson Distribution Plot
poisson_plot <- ggplot() +
geom_line(aes(x = df$Days, y = dpois(df$Days, lambda)), color = "blue", size = 1) +
labs(title = "Poisson Distribution & Frequency of Days",
x = "Days",
y = "Probability") +
scale_x_continuous(breaks = seq(min(df$Days), max(df$Days), by = 1)) +
theme_minimal()
# Frequency Bar Plot
frequency_plot <- ggplot(df, aes(x = factor(Days))) +
geom_bar(stat = "count", fill = "lightblue") +
geom_bar(data = subset(df, Days %in% top_values),
aes(x = factor(Days)),
stat = "count", fill = "red") +
scale_x_discrete(labels = function(x)
ifelse(x %in% top_values, paste(x, "\n(Top)", sep = ""), as.character(x))) +
labs(y = "Frequency") +
theme_minimal() +
theme(axis.title.y = element_blank())  # Remove y-axis title for frequency plot
# Combine the plots
combined_plot <- poisson_plot +
geom_line(data = NULL, aes(x = NULL, y = NULL)) +  # Dummy layer to add the secondary y-axis
annotation_sec_axis(ymin = 0, ymax = max(dpois(df$Days, lambda)),
sec_axis(~., name = "Poisson Probability"))
# Create a ggplot object for the first plot
p1 <- ggplot(data = df) +
geom_bar(aes(x = factor(Days)), stat = "count") +
geom_bar(data = subset(df, Days %in% top_values),
aes(x = factor(Days)),
stat = "count", fill = "red") +
scale_x_discrete(labels = function(x)
ifelse(x %in% top_values, paste(x, "\n(Top)", sep = ""), as.character(x))) +
labs(x = "Days", y = "Frequency")
# Create a ggplot object for the second plot
p2 <- ggplot() +
geom_line(aes(x = df$Days, y = dpois(df$Days, lambda)), color = "blue", size = 3) +
labs(title = "Poisson Distribution Of Days",
y = "Probability")
# Combine the two plots using cowplot
library(cowplot)
install.packages(cowplot)
ggplot(df, aes(x = factor(Days))) +
geom_bar(stat = "count") +
geom_bar(data = subset(df, Days %in% top_values),
aes(x = factor(Days)),
stat = "count", fill = "red") +
geom_line(aes(x = df$Days, y = dpois(df$Days, lambda)), color = "blue", size = 1) +
scale_x_discrete(labels = function(x)
ifelse(x %in% top_values, paste(x, "\n(Top)", sep = ""), as.character(x))) +
labs(title = "Poisson Distribution and Frequency Distribution",
x = "Days",
y = "Frequency / Probability") +
theme_minimal()
# Question 3A
ggplot() +
geom_line(aes(x = df$Days, y = dpois(df$Days, lambda)), color = "blue", size = 3) +
labs(title = "Poisson Distribution Of Days",
x = "Days",
y = "Probability") +
scale_x_continuous(breaks = seq(min(df$Days), max(df$Days), by = 1)) +
theme_minimal()
ggplot(df, aes(x = factor(Days))) +
geom_bar(stat = "count") +
geom_bar(data = subset(df, Days %in% top_values),
aes(x = factor(Days)),
stat = "count", fill = "red") +
scale_x_discrete(labels = function(x)
ifelse(x %in% top_values, paste(x, "\n(Top)", sep = ""), as.character(x))) +
labs(x = "Days", y = "Frequency")
ggplot(df, aes(x = factor(Days))) +
geom_bar(stat = "count") +
geom_bar(data = subset(df, Days %in% top_values),
aes(x = factor(Days)),
stat = "count", fill = "red") +
geom_line(aes(x = df$Days, y = 100*dpois(df$Days, lambda)), color = "blue", size = 1) +
scale_x_discrete(labels = function(x)
ifelse(x %in% top_values, paste(x, "\n(Top)", sep = ""), as.character(x))) +
labs(title = "Poisson Distribution and Frequency Distribution",
x = "Days",
y = "Frequency / Probability") +
theme_minimal()
ggplot(df, aes(x = factor(Days))) +
geom_bar(stat = "count") +
geom_bar(data = subset(df, Days %in% top_values),
aes(x = factor(Days)),
stat = "count", fill = "red") +
geom_line(aes(x = df$Days, y = 100000*dpois(df$Days, lambda)), color = "blue", size = 1) +
scale_x_discrete(labels = function(x)
ifelse(x %in% top_values, paste(x, "\n(Top)", sep = ""), as.character(x))) +
labs(title = "Poisson Distribution and Frequency Distribution",
x = "Days",
y = "Frequency / Probability") +
theme_minimal()
ggplot(df, aes(x = factor(Days))) +
geom_bar(stat = "count") +
geom_bar(data = subset(df, Days %in% top_values),
aes(x = factor(Days)),
stat = "count", fill = "red") +
geom_line(aes(x = df$Days, y = 1000*dpois(df$Days, lambda)), color = "blue", size = 1) +
scale_x_discrete(labels = function(x)
ifelse(x %in% top_values, paste(x, "\n(Top)", sep = ""), as.character(x))) +
labs(title = "Poisson Distribution and Frequency Distribution",
x = "Days",
y = "Frequency / Probability") +
theme_minimal()
ggplot(df, aes(x = factor(Days))) +
geom_bar(stat = "count") +
geom_bar(data = subset(df, Days %in% top_values),
aes(x = factor(Days)),
stat = "count", fill = "red") +
geom_line(aes(x = df$Days, y = 100*dpois(df$Days, lambda)), color = "blue", size = 1) +
scale_x_discrete(labels = function(x)
ifelse(x %in% top_values, paste(x, "\n(Top)", sep = ""), as.character(x))) +
labs(title = "Poisson Distribution and Frequency Distribution",
x = "Days",
y = "Frequency / Probability") +
theme_minimal()
ggplot(df, aes(x = factor(Days))) +
geom_bar(stat = "count") +
geom_bar(data = subset(df, Days %in% top_values),
aes(x = factor(Days)),
stat = "count", fill = "red") +
geom_line(aes(x = df$Days, y = 500*dpois(df$Days, lambda)), color = "blue", size = 1) +
scale_x_discrete(labels = function(x)
ifelse(x %in% top_values, paste(x, "\n(Top)", sep = ""), as.character(x))) +
labs(title = "Poisson Distribution and Frequency Distribution",
x = "Days",
y = "Frequency / Probability") +
theme_minimal()
# Question 3A
ggplot() +
geom_line(aes(x = df$Days, y = dpois(df$Days, lambda)), color = "blue", size = 3) +
labs(title = "Poisson Distribution Of Days",
x = "Days",
y = "Probability") +
scale_x_continuous(breaks = seq(min(df$Days), max(df$Days), by = 1)) +
theme_minimal()
ggplot(df, aes(x = factor(Days))) +
geom_bar(stat = "count") +
geom_bar(data = subset(df, Days %in% top_values),
aes(x = factor(Days)),
stat = "count", fill = "red") +
geom_line(aes(x = df$Days, y = 500*dpois(df$Days, lambda)), color = "blue", size = 1) +
scale_x_discrete(labels = function(x)
ifelse(x %in% top_values, paste(x, "\n(Top)", sep = ""), as.character(x))) +
labs(title = "Poisson Distribution and Frequency Distribution",
x = "Days",
y = "Frequency / Probability") +
theme_minimal()
poisson_prob_range <- function(lambda_f, k_min, k_max) {
probabilities <- numeric(k_max - k_min + 1)
for (k in k_min:k_max) {
probabilities[k - k_min + 1] <- (lambda_f^k * exp(-lambda_f)) / factorial(k)
}
return(sum(probabilities))
}
# Total rate parameter for five individuals, Range is 60 to 80 days
probability <- poisson_prob_range(5 * lambda, 60, 80)
print(probability)
num_patients <- 5
min_recovery_day <- 14
probability_at_least_3_on_or_after_14 <- 1 - ppois(min_recovery_day - 1, num_patients * lambda)
print(probability_at_least_3_on_or_after_14)
print(probability_at_least_3_on_or_after_14)
#Question 2B
freq_df <- data.frame(table(df$Days))
top_values <- head(freq_df[order(-freq_df$Freq), ], 3)$Var1
ggplot(df, aes(x = factor(Days))) +
geom_bar(stat = "count") +
geom_bar(data = subset(df, Days %in% top_values),
aes(x = factor(Days)),
stat = "count", fill = "red") +
scale_x_discrete(labels = function(x)
ifelse(x %in% top_values, paste(x, "\n(Top)", sep = ""), as.character(x))) +
labs(x = "Days", y = "Frequency")
# Function to calculate Poisson probability base on PMF
poisson_prob_range <- function(lambda_f, k_min, k_max) {
probabilities <- numeric(k_max - k_min + 1)
for (k in k_min:k_max) {
probabilities[k - k_min + 1] <- (lambda_f^k * exp(-lambda_f)) / factorial(k)
}
return(sum(probabilities))
}
# Total rate parameter for five individuals, Range is 60 to 80 days
probability <- poisson_prob_range(5 * lambda, 60, 80)
print(probability)
# Question 2D
num_patients <- 5
min_recovery_day <- 14
probability_at_least_3_on_or_after_14 <- 1 - ppois(min_recovery_day - 1, num_patients * lambda)
print(probability_at_least_3_on_or_after_14)
lambda <- 15.556
probability_10_or_less <- ppois(10, lambda)
print(probability_10_or_less)
#Question 2B
freq_df <- data.frame(table(df$Days))
top_values <- head(freq_df[order(-freq_df$Freq), ], 3)$Var1
ggplot(df, aes(x = factor(Days))) +
geom_bar(stat = "count") +
geom_bar(data = subset(df, Days %in% top_values),
aes(x = factor(Days)),
stat = "count", fill = "red") +
scale_x_discrete(labels = function(x)
ifelse(x %in% top_values, paste(x, "\n(Top)", sep = ""), as.character(x))) +
labs(x = "Days", y = "Frequency")
df <- read.csv("covid.2023.csv")
# Question 1
library(MASS)
fit <- fitdistr(df$Days, "Poisson")
estimated_lambda <- fit$estimate["lambda"]
print(estimated_lambda)
# Question 2A
lambda <- 15.556
probability_10_or_less <- ppois(10, lambda)
print(probability_10_or_less)
#Question 2B
freq_df <- data.frame(table(df$Days))
top_values <- head(freq_df[order(-freq_df$Freq), ], 3)$Var1
ggplot(df, aes(x = factor(Days))) +
geom_bar(stat = "count") +
geom_bar(data = subset(df, Days %in% top_values),
aes(x = factor(Days)),
stat = "count", fill = "red") +
scale_x_discrete(labels = function(x)
ifelse(x %in% top_values, paste(x, "\n(Top)", sep = ""), as.character(x))) +
labs(x = "Days", y = "Frequency")
# Question 2C
# Function to calculate Poisson probability base on PMF
poisson_prob_range <- function(lambda_f, k_min, k_max) {
probabilities <- numeric(k_max - k_min + 1)
for (k in k_min:k_max) {
probabilities[k - k_min + 1] <- (lambda_f^k * exp(-lambda_f)) / factorial(k)
}
return(sum(probabilities))
}
# Total rate parameter for five individuals, Range is 60 to 80 days
probability <- poisson_prob_range(5 * lambda, 60, 80)
print(probability)
# Question 2D
num_patients <- 5
min_recovery_day <- 14
probability_at_least_3_on_or_after_14 <- 1 - ppois(min_recovery_day - 1, num_patients * lambda)
print(probability_at_least_3_on_or_after_14)
combined_recovery_range <- 60:80
probability_combined_recovery <- ppois(combined_recovery_range[2], individuals * lambda_per_individual).ppois(combined_recovery_range[1] - 1,individuals * lambda_per_individual)
probability_combined_recovery <- ppois(combined_recovery_range[2], 5 * lambda).ppois(combined_recovery_range[1] - 1,5 * lambda)
combined_recovery_range <- 60:80
probability_combined_recovery <- ppois(combined_recovery_range[2], 5 * lambda).ppois(combined_recovery_range[1] - 1,5 * lambda)
probability_combined_recovery <- ppois(combined_recovery_range[2], 5 * lambda) - ppois(combined_recovery_range[1] - 1,5 * lambda)
probability_combined_recovery
num_patients <- 5
min_recovery_day <- 14
probability_at_least_3_on_or_after_14 <- 1 - ppois(min_recovery_day - 1, num_patients * lambda)
print(probability_at_least_3_on_or_after_14)
poisson_prob_range <- function(lambda_f, k_min, k_max) {
probabilities <- numeric(k_max - k_min + 1)
for (k in k_min:k_max) {
probabilities[k - k_min + 1] <- (lambda_f^k * exp(-lambda_f)) / factorial(k)
}
return(sum(probabilities))
}
# Total rate parameter for five individuals, Range is 60 to 80 days
probability <- poisson_prob_range(5 * lambda, 60, 80)
print(probability)
combined_recovery_range <- 60:80
probability_combined_recovery <- ppois(combined_recovery_range[2], 5 * lambda) - ppois(combined_recovery_range[1] - 1,5 * lambda)
probability_combined_recovery
# Question 2C
# Function to calculate Poisson probability base on PMF
poisson_prob_range <- function(lambda_f, k_min, k_max) {
probabilities <- numeric(k_max - k_min + 1)
for (k in k_min:k_max) {
probabilities[k - k_min + 1] <- (lambda_f^k * exp(-lambda_f)) / factorial(k)
}
return(sum(probabilities))
}
# Total rate parameter for five individuals, Range is 60 to 80 days
probability <- poisson_prob_range(5 * lambda, 60, 80)
print(probability)
# Question 2D
prob_recovery_after_14 <- 1 - ppois(13, lambda)
# Calculate the probability that three or more out of five patients recover on or after day 14
# Using binomial distribution since we have multiple patients
# P(X >= 3) = P(X = 3) + P(X = 4) + P(X = 5)
probability_three_or_more <- sum(dbinom(3:5, 5, prob_recovery_after_14))
print(probability_three_or_more)
# Question 2D
prob_after_14 <- 1 - ppois(13, lambda)
prob_after_14
# Calculate the probability that three or more out of five patients recover on or after day 14
# Using binomial distribution since we have multiple patients
# P(X >= 3) = P(X = 3) + P(X = 4) + P(X = 5)
probability_three_or_more <- sum(dbinom(3:5, 5, prob_after_14))
print(probability_three_or_more)
ggplot(df, aes(x = factor(Days))) +
geom_bar(stat = "count") +
geom_bar(data = subset(df, Days %in% top_values),
aes(x = factor(Days)),
stat = "count", fill = "red") +
geom_line(aes(x = df$Days,
y = 500*dpois(df$Days, lambda)),
color = "blue", size = 1) +
scale_x_discrete(labels = function(x)
ifelse(x %in% top_values, paste(x, "\n(Top)", sep = ""), as.character(x))) +
labs(title = "Poisson Distribution and Frequency Distribution",
x = "Days",
y = "Frequency / Probability") +
theme_minimal()
ggplot(df, aes(x = factor(Days))) +
geom_bar(stat = "count") +
geom_bar(data = subset(df, Days %in% top_values),
aes(x = factor(Days)),
stat = "count", fill = "red") +
geom_line(aes(x = df$Days,
y = 500*dpois(df$Days, lambda)),
color = "blue", size = 2) +
scale_x_discrete(labels = function(x)
ifelse(x %in% top_values, paste(x, "\n(Top)", sep = ""), as.character(x))) +
labs(title = "Poisson Distribution and Frequency Distribution",
x = "Days",
y = "Frequency / Probability") +
theme_minimal()
ggplot(df, aes(x = factor(Days))) +
geom_bar(stat = "count") +
geom_bar(data = subset(df, Days %in% top_values),
aes(x = factor(Days)),
stat = "count", fill = "red") +
geom_line(aes(x = df$Days,
y = 500*dpois(df$Days, lambda)),
color = "blue", size = 2) +
scale_x_discrete(labels = function(x)
ifelse(x %in% top_values, paste(x, "\n(Top)", sep = ""), as.character(x))) +
labs(title = "Poisson Distribution and Frequency Distribution",
x = "Days",
y = "Frequency / Probability")

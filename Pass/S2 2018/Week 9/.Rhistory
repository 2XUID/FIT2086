my data <- read.table("Twitter_Data_1",header=TRUE,sep=",")
my_data <- read.table("Twitter_Data_1",header=TRUE,sep=",")
my_data <- read.table("\Downloads|Twitter_Data_1",header=TRUE,sep=",")
my_data <- read.table("\Downloads\Twitter_Data_1",header=TRUE,sep=",")
my_data <- read.table("Downloads\Twitter_Data_1",header=TRUE,sep=",")
setwd("C:\\Users\\GireshMulani\\Downloads")
setwd(Users\\GireshMulani\\Downloads")
setwd("Users\\GireshMulani\\Downloads")
setwd("Users\\Giresh Mulani\\Downloads")
q()
?dbinom
pnorm()
pnorm(q, mean = -0.33, sd = 1, lower.tail = TRUE, log.p = FALSE)
pnorm(-0.33)
Y=0:10
dgeom(Y, 0.5)
plot(dgeom(Y, 0.5))
plot(dgeom(Y, 0.5), x-axis = y, y-axis = probability)
plot(dgeom(Y, 0.5), xlab = y, ylab = probability)
plot(dgeom(Y, 0.5), xlab = Y, ylab = probability)
plot(dgeom(Y, 0.5), xlab = Y, ylab = p)
plot(dgeom(Y, 0.5), xlab = Y, ylab = "probability")
plot(dgeom(Y, 0.5), xlab = "y", ylab = "probability")
plot(dgeom(Y, 1/3), xlab = "y", ylab = "probability")
plot(dgeom(Y, 0.2), xlab = "y", ylab = "probability")
legend(plot(dgeom(Y, 0.2), xlab = "y", ylab = "probability"))
setwd("~/Google Drive/Monash/FIT2086/S2-18/Week 9")
source('~/Google Drive/Monash/FIT2086/S2-18/Week 9/wrappers.R')
cv = learn.tree.cv(tree.diabetes,nfolds=10,m=100)
tree.diabetes = tree(Y ~ ., diabetes.train)
install(tree)
install.packages("tree")
install.packages("kknn")
tree.diabetes = tree(Y ~ ., diabetes.train)
tree.diabetes = tree(Y ~ ., diabetes.train)
library(tree)
library(kknn)
tree.diabetes = tree(Y ~ ., diabetes.train)
diabetes.train <- read.csv("diabetes.train.csv")
diabetes.test <- read.csv("diabetes.test.csv")
tree.diabetes = tree(Y ~ ., diabetes.train)
sqrt(mean((predict(tree.diabetes, diabetes.test) - diabetes.test$Y)^2))
cv = learn.tree.cv(tree.diabetes,nfolds=10,m=100)
plot(cv$cv)
diabetes.tree.pruned <- cv$best.tree
summary(diabetes.tree.pruned)
plot(diabetes.tree.pruned)
text(diabetes.tree.pruned, digits=3)
sqrt(mean((predict(diabetes.tree.pruned, diabetes.test) - diabetes.test$Y)^2))
install.packages("glmnet")
library(glmnet)
lasso.fit = cv.glmnet.f(Y ~ ., data=diabetes.train)
glmnet.tidy.coef(lasso.fit)
sqrt(mean((predict.glmnet.f(lasso.fit,diabetes.test)-diabetes.test$Y)^2))
install.packages("RandomForest")
install.packages("randonForest")
install.packages("randomForest")
library(randomForest)
rf.diabetes = randomForest(Y ~ ., data=diabetes.train)
rf.diabetes
sqrt(mean((predict(rf.diabetes, diabetes.test) - diabetes.test$Y)^2))
rf.diabetes = randomForest(Y ~ ., data=diabetes.train, importance=TRUE, ntree=5000)
round( importance( rf.diabetes ), 2)
ytest.hat = fitted( kknn(Y ~ ., diabetes.train, diabetes.test) )
sqrt(mean((ytest.hat - diabetes.test$Y)^2))
kernels = c("rectangular","triangular","epanechnikov","gaussian","rank","optimal")
knn = train.kknn(Y ~ ., data = diabetes.train, kmax=25, kernel=kernels)
ytest.hat = fitted( kknn(Y ~ ., diabetes.train, diabetes.test,
kernel = knn$best.parameters$kernel, k = knn$best.parameters$k) )
ytest.hat
summary(ytest.hat)
knn
sqrt(mean((ytest.hat - diabetes.test$Y)^2))
